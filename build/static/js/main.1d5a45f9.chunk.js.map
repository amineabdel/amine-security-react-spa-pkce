{"version":3,"sources":["service/ServAuthAPi.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ServAuthAPi","Object","classCallCheck","this","userManager","UserManager","authority","client_id","redirect_uri","silent_redirect_uri","post_logout_redirect_uri","response_type","scope","createClass","key","value","getUser","signinRedirect","signoutRedirect","then","data","axios","get","headers","Accept","Authorization","access_token","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","login","callApi","setState","api","logout","user","state","isLoggedIn","react","className","JSON","stringify","profile","type","onClick","React","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAIaA,EAAb,WAGE,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAG,KAFRC,iBAEO,EA2BZD,KAAKC,YAAc,IAAIC,cAlBV,CACXC,UAAW,kCACXC,UAAW,MACXC,aAAc,0DACdC,oBAAqB,uDACrBC,yBAA0B,sCAM1BC,cAAe,OACfC,MAAO,6BAxBb,OAAAX,OAAAY,EAAA,EAAAZ,CAAAD,EAAA,EAAAc,IAAA,UAAAC,MAAA,WAmCI,OAAOZ,KAAKC,YAAYY,YAnC5B,CAAAF,IAAA,QAAAC,MAAA,WAuCI,OAAOZ,KAAKC,YAAYa,mBAvC5B,CAAAH,IAAA,SAAAC,MAAA,WA4CI,OAAOZ,KAAKC,YAAYc,oBA5C5B,CAAAJ,IAAA,UAAAC,MAAA,WAsDI,OAAOZ,KAAKa,UAAUG,KAAK,SAAAC,GACzB,OAAOC,IAAMC,IAAI,0CAA2C,CAC1DC,QAAS,CACPC,OAAQ,mBAAoBC,cAAiB,UAAYL,EAAKM,sBAzDxE1B,EAAA,GCoEe2B,cA9DX,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAA5B,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IACpBE,EAAA5B,OAAA6B,EAAA,EAAA7B,CAAAE,KAAAF,OAAA8B,EAAA,EAAA9B,CAAA0B,GAAAK,KAAA7B,KAAMyB,KAJH5B,iBAGiB,EAAA6B,EAcjBI,MAAQ,WACXJ,EAAK7B,YAAYiC,SAfGJ,EAmBjBK,QAAU,WACbL,EAAK7B,YAAYkC,UAAUf,KAAK,SAAAC,GAC5BS,EAAKM,SAAS,CAAEC,IAAKhB,EAAKA,UArBVS,EA0BjBQ,OAAS,WACZR,EAAK7B,YAAYqC,UA3BGR,EA+BjBb,QAAU,WACba,EAAK7B,YAAYgB,UAAUG,KAAK,SAAAmB,GAC5BT,EAAKM,SAAS,CAAEG,YA9BpBT,EAAK7B,YAAc,IAAIA,EAEvB6B,EAAKU,MAAQ,CAAED,KAAM,GAAIF,IAAK,IALVP,mFAUpB1B,KAAKa,2CAqCL,IAAMwB,EAAarC,KAAKoC,MAAMD,KAC9B,OACIG,EAAA,qBAAKC,UAAU,OACXD,EAAA,gDACAA,EAAA,yDACAA,EAAA,qCAAcA,EAAA,uBAAID,EAAaG,KAAKC,UAAUJ,EAAWK,SAAWJ,EAAA,wBAAQK,KAAK,SAASJ,UAAU,KAAKK,QAAS5C,KAAK8B,OAAnD,wCAA+FQ,EAAA,kCAA/F,cAApE,KACAA,EAAA,wBAAQC,UAAU,KAAKK,QAAS5C,KAAK+B,SAArC,OACAO,EAAA,+BAAQA,EAAA,uBAAIE,KAAKC,UAAUzC,KAAKoC,MAAMH,MAAtC,KACAK,EAAA,wBAAQC,UAAU,KAAKK,QAAS5C,KAAKkC,QAArC,kBA3DEW,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.1d5a45f9.chunk.js","sourcesContent":["import { User, UserManager } from 'oidc-client';\nimport axios from 'axios';\n\n\nexport class ServAuthAPi {\n  public userManager: UserManager;\n\n  constructor() {\n    //inspiration links below:\n    //https://github.com/maxmantz/redux-oidc/wiki/2.-Configuration\n    //https://github.com/IdentityModel/oidc-client-js/wiki\n    //https://www.npmjs.com/package/react-openidconnect\n    //https://github.com/stsiwo/idp_auth_pkce_client/blob/master/src/config/oidc.js\n    //https://www.npmjs.com/package/oidc-client\n    //https://github.com/IdentityModel/oidc-client-js\n\n    const conf = {\n      authority: 'https://demo.identityserver.io/',\n      client_id: 'spa',\n      redirect_uri: 'https://amine-security.netlify.com/signin-callback.html',\n      silent_redirect_uri: 'https://amine-security.netlify.com/silent-renew.html',\n      post_logout_redirect_uri: 'https://amine-security.netlify.com/',\n      //we receive an authorization code in return from the authorization endpoint\n      //https://www.scottbrady91.com/Angular/Migrating-oidc-client-js-to-use-the-OpenID-Connect-Authorization-Code-Flow-and-PKCE\n\n      //https://manfredsteyer.github.io/angular-oauth2-oidc/docs/additional-documentation/code-flow-+-pcke.html\n      //To configure your solution for code flow + PKCE you have to set the responseType to code:\n      response_type: 'code',\n      scope: 'openid profile email api'\n    };\n\n    //put settings object in UserManager.\n    //after that an user login, you can manage what you get back from OIDC Provider like the access token.\n    //https://github.com/IdentityModel/oidc-client-js/wiki#configuration\n    this.userManager = new UserManager(conf);\n  }\n\n  //authorization\n  public getUser(): Promise<User | null> {\n    return this.userManager.getUser();\n  }\n\n  public login(): Promise<void> {\n    return this.userManager.signinRedirect();\n  }\n\n\n  public logout(): Promise<void> {\n    return this.userManager.signoutRedirect();\n  }\n\n  //API\n  public callApi(): Promise<any> {\n    //PS. this follows only the happy path. When you click on API without being logged in. \n    //You'll get this error: 'Unhandled Rejection (TypeError): Cannot read property 'access_token' of null'\n\n    //After initializing getUser() above, we want to do something with it\n    //and below you can see that with axios (similar as with fetch) we want to get a http request from api/test and get the access token\n    return this.getUser().then(data => {\n      return axios.get('https://demo.identityserver.io/api/test', {\n        headers: {\n          Accept: 'application/json', 'Authorization': 'Bearer ' + data.access_token\n        }\n      });\n    });\n  }\n\n\n\n}\n","import './App.scss';\r\nimport * as React from 'react';\r\nimport { ServAuthAPi } from './service/ServAuthAPi';\r\n\r\n\r\n\r\nclass App extends React.Component<any, any> {\r\n    public ServAuthAPi: ServAuthAPi;\r\n\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.ServAuthAPi = new ServAuthAPi();\r\n        //initializing \r\n        this.state = { user: {}, api: {} };\r\n\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.getUser();\r\n    }\r\n\r\n\r\n    public login = () => {\r\n        this.ServAuthAPi.login();\r\n\r\n    };\r\n\r\n    public callApi = () => {\r\n        this.ServAuthAPi.callApi().then(data => {\r\n            this.setState({ api: data.data });\r\n        })\r\n    };\r\n\r\n\r\n    public logout = () => {\r\n        this.ServAuthAPi.logout();\r\n    };\r\n\r\n\r\n    public getUser = () => {\r\n        this.ServAuthAPi.getUser().then(user => {\r\n            this.setState({ user });\r\n        });\r\n    };\r\n\r\n\r\n    public render() {\r\n        //https://codepen.io/joellesenne/pen/mdCHA\r\n        //I couldn't see the problem at first why in the p tag the profile isn't visible. \r\n        // those errors is what I got:\r\n        //https://stackoverflow.com/questions/51008159/reactjs-error-if-you-meant-to-render-a-collection-of-children-use-an-array-ins\r\n        //https://stackoverflow.com/questions/37997893/promise-error-objects-are-not-valid-as-a-react-child\r\n        //https://www.quora.com/How-can-I-solve-the-Uncaught-Error-Objects-are-not-valid-as-a-React-child-found-object-with-keys-original-thumbnail-If-you-meant-to-render-a-collection-of-children-can-you-use-an-array-instead\r\n\r\n        //Well As you can see below the solution was to stringify it haha. I've been too long looking for a solution.\r\n        const isLoggedIn = this.state.user;\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Assignment Security.</h1>\r\n                <h2>Security react spa pkce oidc.</h2>\r\n                <p>profile =  <b>{isLoggedIn ? JSON.stringify(isLoggedIn.profile) : <button type=\"submit\" className=\"b1\" onClick={this.login}>sorry you're not logged in yet.Click <span>here</span> to login</button>}</b> </p>\r\n                <button className=\"b2\" onClick={this.callApi}>API</button>\r\n                <p>api =<b>{JSON.stringify(this.state.api)}</b> </p>\r\n                <button className=\"b3\" onClick={this.logout}>Logout</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}